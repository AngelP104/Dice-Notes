"""
Django settings for dicenotes project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from django.contrib.messages import constants as messages

from dotenv import load_dotenv
import firebase_config
import dj_database_url

load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# !SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG")


ALLOWED_HOSTS = [host.strip() for host in os.getenv("ALLOWED_HOSTS", "*").split(",")]
print("ALLOWED_HOSTS:", ALLOWED_HOSTS)


# Application definition

INSTALLED_APPS = [
    'daphne', #Servidor de Websockets, debe estar el primero
    'channels', #Websockets
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dndapp.apps.DndappConfig',
    'corsheaders',
    'api.apps.ApiConfig',
    'colorfield', #*Django admin color picker field
    'rest_framework',
    'firebase_auth', #*Aplicacion propia para autenticar con Firebase
    
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django.middleware.common.CommonMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware", # Para servir archivos estaticos
]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

ROOT_URLCONF = 'dicenotes.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'frontend/dist'), # "templates" para Django, "frontend/dist" para React
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dicenotes.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {
    "default": dj_database_url.config(default=os.getenv("DATABASE_URL"))
}

"""
# SQLite para primeras pruebas
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
"""



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Madrid'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend/dist/assets'),
]

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redirige al dashboard después de iniciar sesión
LOGIN_REDIRECT_URL = '/dashboard/'

# Redirige al login si el usuario no está autenticado
LOGIN_URL = '/accounts/login/'

# Redirige después de cerrar sesión
LOGOUT_REDIRECT_URL = '/'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

CORS_ALLOWED_ORIGINS = []
CSRF_TRUSTED_ORIGINS = []

if DEBUG:
    CORS_ALLOWED_ORIGINS += [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://127.0.0.1:6379",
        "http://localhost:6379",
    ]
    CSRF_TRUSTED_ORIGINS += [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://127.0.0.1:3000",
        "http://localhost:3000",
    ]
else:
    CORS_ALLOWED_ORIGINS += [
        os.environ.get("CORS_ALLOWED_ORIGINS"),  # cambia esto por tu dominio real
    ]
    CSRF_TRUSTED_ORIGINS += [
        os.environ.get("CSRF_TRUSTED_ORIGINS"),
    ]
# CORS_ALLOWED_ORIGINS = [
#     "http://127.0.0.1:5173", # URL de React
#     "http://localhost:5173",
#     "http://127.0.0.1:6379", # Puerto donde corre Redis
#     "http://localhost:6379",
# ]

# # Permitir solo desde el frontend (seguro para producción)
# # CORS_ALLOWED_ORIGINS = [
# #     "http://localhost:3000",  # URL de tu React frontend
# # ]

# CSRF_TRUSTED_ORIGINS = [
#     "http://127.0.0.1:5173", # URL de React
#     "http://localhost:5173",
#     "http://127.0.0.1:3000", # Puerto donde corre Redis
#     "http://localhost:3000",
# ]


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

X_FRAME_OPTIONS = "SAMEORIGIN"

# Mensajes
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

ASGI_APPLICATION = "dicenotes.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.getenv("REDIS_URL", "redis://localhost:6379")]
            # añade en Railway una variable de entorno REDIS_URL, o si usas el servicio de Redis de Railway, copia la URL que te da (por ejemplo: redis://default:password@host:port).
        }
        # Esta linea estaba en desarrollo
        # "BACKEND": "channels.layers.InMemoryChannelLayer",
        
        #"CONFIG" : {
        #    "hosts": [('127.0.0.1', 6379)],
        #}
    },
}

FIREBASE_CONFIG = os.path.join(BASE_DIR, 'firebase_config.json')
AUTH_USER_MODEL = 'firebase_auth.CustomUser'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'firebase_auth.authentication.FirebaseAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', #Se puede poner AllowAny para desarrollo
    ),
}